{
	"Redux Slice": {
	  "prefix": "slice",
	  "body": [
		"import { Slice, createSlice } from \"@reduxjs/toolkit\";",
		"import type { PayloadAction } from \"@reduxjs/toolkit\";",
		"",
		"export type ${TM_FILENAME_BASE}StateType = {",
		"  items: any[] | [];",
		"  totalItems: number;",
		"  isTableLoading: boolean;",
		"  page: number;",
		"  rowsPerPage: number;",
		"  searchValue: string;",
		"  sortValue: { field: string; value: \"DESC\" | \"ASC\" };",
		"  filterBy: {",
		"    fieldName: string;",
		"    value: string[];",
		"  }[];",
		"  dateFilter: {",
		"    start_date: string | null;",
		"    end_date: string | null;",
		"  };",
		"};",
		"",
		"const initialState: ${TM_FILENAME_BASE}StateType = {",
		"  items: [],",
		"  totalItems: 0,",
		"  isTableLoading: true,",
		"  page: 1,",
		"  rowsPerPage: 20,",
		"  searchValue: \"\",",
		"  sortValue: { field: \"createdAt\", value: \"DESC\" },",
		"  filterBy: [",
		"    {",
		"      fieldName: \"companyName\",",
		"      value: [],",
		"    },",
		"    {",
		"      fieldName: \"country\",",
		"      value: [],",
		"    },",
		"  ],",
		"  dateFilter: {",
		"    start_date: null,",
		"    end_date: null,",
		"  },",
		"};",
		"",
		"const ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}: Slice<${TM_FILENAME_BASE}StateType> = createSlice({",
		"  name: \"${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}\",",
		"  initialState,",
		"  reducers: {",
		"    setItems: (state, action: PayloadAction<any[] | []>) => {",
		"      state.items = action.payload;",
		"    },",
		"    setPage: (state, action: PayloadAction<number>) => {",
		"      state.page = action.payload;",
		"      document.getElementById(\"scroll-top\")?.scrollTo(0, 0);",
		"    },",
		"    setRowsPerPage: (state, action: PayloadAction<number>) => {",
		"      state.rowsPerPage = action.payload;",
		"      state.page = 1;",
		"      document.getElementById(\"scroll-top\")?.scrollTo(0, 0);",
		"    },",
		"    setSearchValue: (state, action: PayloadAction<string>) => {",
		"      state.searchValue = action.payload;",
		"      state.page = 1;",
		"    },",
		"    setSortValue: (state, action: PayloadAction<{ field: string; value: \"DESC\" | \"ASC\" }>) => {",
		"      state.sortValue = action.payload;",
		"      state.page = 1;",
		"    },",
		"    setTotalItems: (state, action: PayloadAction<number>) => {",
		"      state.totalItems = action.payload;",
		"    },",
		"    setIsTableLoading: (state, action: PayloadAction<boolean>) => {",
		"      state.isTableLoading = action.payload;",
		"    },",
		"    setFilterBy: (state, action: PayloadAction<{ fieldName: string; value: string[] }[]>) => {",
		"      state.filterBy = action.payload;",
		"      state.page = 1;",
		"    },",
		"    setDateFilter: (state, action: PayloadAction<{ start_date: string; end_date: string }>) => {",
		"      state.dateFilter = action.payload;",
		"    },",
		"  },",
		"});",
		"",
		"export const {",
		"  setItems,",
		"  setPage,",
		"  setRowsPerPage,",
		"  setSearchValue,",
		"  setSortValue,",
		"  setTotalItems,",
		"  setIsTableLoading,",
		"  setDateFilter,",
		"  setFilterBy,",
		"} = ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}.actions;",
		"export default ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}.reducer;"
	  ],
	  "description": "Redux Toolkit Slice Template"
	},
  
	"Create service": {
	  "prefix": "service",
	  "body": [
		"import apiSlice from 'src/services/ApiSlice';",
		"",
		"export const ${TM_FILENAME_BASE/(.*)Services/${1:/camelcase}/}Api = apiSlice.injectEndpoints({",
		"  endpoints: (builder) => ({",
		"    ${1}",
		"  }),",
		"});",
		"",
		"export const { ${2} } = ${TM_FILENAME_BASE/(.*)Services/${1:/camelcase}/}Api;"
	  ],
	  "description": "Create an API Slice with Endpoints"
	},
  
	"Create Endoint": {
	  "prefix": "endpoint",
	  "body": [
		"// ${1}",
		"${2}: builder.${3:mutation}({",
		"  query: (body) => {",
		"    return {",
		"      url: '${4}',",
		"      method: '${5}',",
		"      body,",
		"    };",
		"  },",
		"}),"
	  ],
	  "description": "Create an RTK Mutation Function"
	}
  }